generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role { 
  TRAINEE
  MENTOR
  EXAMINER
  ADMIN
}

enum Status {
  Ongoing
  Completed
  Tba
}

enum UserStatus {
  UNVERIFIED
  VERIFIED
}

enum Visibility {
  FOR_GRADER
  FOR_TRAINEE
}

enum LessonStatus {
  NOT_DEADLINE
  DEADLINE
}

enum ProfileType {
  CASUAL
  PROFESSIONAL
}


model User {
  id               String   @id @default(uuid())
  fullName         String?  @db.VarChar(50)
  nickname         String?
  pob              String?  @db.VarChar(30)
  dob              DateTime?
  address          String?
  mobile           String?  @db.VarChar(15)
  lastEdu          String?
  lastEduInst      String?
  major            String?
  inCollege        Boolean?
  college          String?
  currentMajor     String?
  github           String?
  skill1           Int?
  skill2           Int?
  skill3           Int?
  skill4           Int?
  skill5           Int?
  skill6           Int?
  skill7           Int?
  skill8           Int?
  confident        String?  @db.VarChar(300)
  email            String   @unique
  password         String
  Token            Token[]
  refreshToken     String?
  role             Role
  userstatus       UserStatus
  batches          Batch[]  @relation("BatchParticipants")
  mentors          Batch[]  @relation("BatchMentors")
  classMentors     Class[]  @relation("ClassMentors")
  notes            Note[]   @relation("GraderNotes")
  receivedNotes    Note[]   @relation("TraineeNotes")
  lessonCompletions LessonCompletion[]
  certificates     Certificate[]
  profiles         Profile[]
  classes          Class[]     @relation("UserClasses")
}

model Token {
  id     String @id @default(uuid())
  token  String @db.Text
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Batch {
  id           String    @id @default(uuid())
  batchNum     Int       @unique
  batchClass   String    @db.VarChar(50)
  batchTitle   String?   @db.VarChar(50)
  batchDesc    String?   @db.VarChar(100)
  mentors      User[]    @relation("BatchMentors")
  startDate    DateTime
  endDate      DateTime
  participants User[]    @relation("BatchParticipants")
  status       Status
  challenges   Challenge[]
  classes      Class[]   @relation("BatchClasses")
  lessons      Lesson[]  @relation("BatchLessons")
  certificates Certificate[]
}

model Class {
  id          String      @id @default(uuid())
  className   String      @db.Text
  createdAt   DateTime
  participant Int         @default(0) // This will now reflect the count of users joined
  batch       Batch       @relation("BatchClasses", fields: [batchId], references: [id])
  batchId     String
  challenges  Challenge[]
  lessons     Lesson[]    @relation("ClassLessons")
  certificates Certificate[]
  status      Status      @default(Tba)
  users       User[]      @relation("UserClasses")
  mentors     User[]      @relation("ClassMentors")
}


model Challenge {
  id        String @id @default(uuid())
  createdAt DateTime
  batch     Batch  @relation(fields: [batchId], references: [id])
  batchId   String
  class     Class  @relation(fields: [classId], references: [id])
  classId   String
}

model Note {
  id          String      @id @default(uuid())
  content     String      @db.VarChar(300)
  visibility  Visibility
  graderId    String
  grader      User        @relation("GraderNotes", fields: [graderId], references: [id])
  traineeId   String
  trainee     User        @relation("TraineeNotes", fields: [traineeId], references: [id])
  createdAt   DateTime    @default(now())
}

model Lesson {  
  id          String   @id @default(uuid())
  title       String   @db.VarChar(100)
  description String   @db.VarChar(300)
  deadline    DateTime
  status      LessonStatus @default(NOT_DEADLINE)
  createdAt   DateTime @default(now())
  files       File[]   
  batchId     String
  batch       Batch    @relation("BatchLessons", fields: [batchId], references: [id], onDelete: Cascade)
  classId     String
  class       Class    @relation("ClassLessons", fields: [classId], references: [id], onDelete: Cascade)
  completions LessonCompletion[]
}

model LessonCompletion {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completed   Boolean  @default(false)
  completedAt DateTime?
}

model Certificate {
  id        String  @id @default(uuid())
  traineeId String
  trainee   User    @relation(fields: [traineeId], references: [id], onDelete: Cascade)
  classId   String
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  batchId   String
  batch     Batch   @relation(fields: [batchId], references: [id], onDelete: Cascade)
  filepath  String  @db.Text
  mimetype  String
  size      Int
  status    String  @default("Issued")
  issuedAt  DateTime @default(now())
}

model File {
  id        String   @id @default(uuid())
  filename  String   @db.VarChar(255)
  filepath  String   @db.Text
  mimetype  String   @db.VarChar(100)
  size      Int
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Profile {
  id        String   @id @default(cuid())
  type      String
  userId    String
  filepath  String
  mimetype  String
  size      Int
  user      User     @relation(fields: [userId], references: [id])
  @@unique([userId, type]) //mastiin cuman 1 profile dengan 1 jenis yang terkait pada userId
}
