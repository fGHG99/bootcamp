// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role { 
  TRAINEE
  MENTOR
  EXAMINER
  ADMIN
}

model User { 
  id             String   @id @default(uuid())
  fullName       String?   @db.VarChar(50)
  nickname       String?
  pob            String?   @db.VarChar(30)
  dob            DateTime? 
  address        String?   
  mobile         String?   @db.VarChar(15)
  lastEdu        String?
  lastEduInst    String?
  major          String?
  inCollege      Boolean?
  college        String?
  currentMajor   String?
  github         String?
  skill1         Int?      
  skill2         Int?      
  skill3         Int?      
  skill4         Int?    
  skill5         Int?   
  skill6         Int?    
  skill7         Int?      
  skill8         Int?      
  confident      String?   @db.VarChar(300)
  email          String   @unique
  password       String
  Token          Token[]
  refreshToken   String
  status         String @db.VarChar(10)
  role           String @db.VarChar(10)
  batch                                 //relation with batchNum on batch table
  mentor                                //relation with batchNum fields on batch table, can be null only user with role MENTOR that can insert this
}

model Token {
  id     String @id @default(uuid())
  token  String @db.Text
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Batch {
  id         String @id @default(uuid())
  batchNum   Int @unique
  batchClass String @db.VarChar(50)
  mentor     Int                             //relation with asigned Mentor fields on user table
  startDate  DateTime
  endDate    DateTime
  participants  Int                          //relation with total participant for the batch
  status     String @db.VarChar(10)       //upcoming or ended or ongoing
  challenges Int                          //relation with total challenge that are on the batch
}

model Class {
  id String @id @default(uuid())
  className String @db.Text
  createdAt DateTime
  participant Int 
  batch //relation with batch table batchNum one to many

}

model Challenge {
  id String @id @default(uuid())
  createdAt DateTime
  batch //relation with batch one to many
  class //relation with class table one to many
}

