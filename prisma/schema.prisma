generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role { 
  TRAINEE
  MENTOR
  EXAMINER
  ADMIN
}

enum Status {
  Ongoing
  Completed
  Tba
}

enum UserStatus {
  UNVERIFIED
  VERIFIED
}

enum Visibility {
  FOR_GRADER
  FOR_TRAINEE
}

enum LessonStatus {
  ASSIGNED
  LATE
  NOTSUBMITTED
  SUBMITTED
}

enum ProfileType {
  CASUAL
  PROFESSIONAL
}


model User {
  id               String   @id @default(uuid())
  fullName         String?  @db.VarChar(50)
  nickname         String?
  pob              String?  @db.VarChar(30)
  dob              DateTime?
  address          String?
  mobile           String?  @db.VarChar(15)
  lastEdu          String?
  lastEduInst      String?
  major            String?
  inCollege        Boolean?
  college          String?
  currentMajor     String?
  github           String?
  skill1           Int?
  skill2           Int?
  skill3           Int?
  skill4           Int?
  skill5           Int?
  skill6           Int?
  skill7           Int?
  skill8           Int?
  confident        String?  @db.VarChar(300)
  email            String   @unique
  password         String
  Token            Token[]
  refreshToken     String?
  role             Role
  userstatus       UserStatus
  isLoggedIn       Boolean  @default(false)
  batches          Batch[]  @relation("BatchParticipants")
  mentors          Batch[]  @relation("BatchMentors")
  classMentors     Class[]  @relation("ClassMentors")
  notes            Note[]   @relation("GraderNotes")
  receivedNotes    Note[]   @relation("TraineeNotes")
  lesCompletions   LessonCompletion[]
  chCompletions    ChallengeCompletion[]
  certificates     Certificate[]
  profiles         Profile[]
  classes          Class[]     @relation("UserClasses")
  notification     Notification[]
  uploadedLessons  Lesson[]    @relation("UploadedLessons") // Bidirectional relation to Lesson
  uploadedChallenges Challenge[] @relation("UploadedChallenges") // Bidirectional relation to Challenge
  schedule         Schedule[]
}

model Roles {
  id Int @id @default(autoincrement())
  name String @unique
}

model Token {
  id     String @id @default(uuid())
  token  String @db.Text
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Batch {
  id           String    @id @default(uuid())
  batchNum     Int       @unique
  batchTitle   String?   @db.VarChar(50)
  batchDesc    String?   @db.VarChar(100)
  mentors      User[]    @relation("BatchMentors")
  startDate    DateTime
  endDate      DateTime?
  participants User[]    @relation("BatchParticipants")
  status       Status
  challenges   Challenge[] @relation("BatchChallenges")
  classes      BatchClass[]
  lessons      Lesson[]  @relation("BatchLessons")
  certificates Certificate[]
}

model Class {
  id          String      @id @default(uuid())
  className   String      @db.Text
  createdAt   DateTime
  participant Int         @default(0) 
  batches     BatchClass[]
  challenges  Challenge[] @relation("ClassChallenges")
  lessons     Lesson[]    @relation("ClassLessons")
  certificates Certificate[]
  Lcompletions LessonCompletion[]
  Ccompletions ChallengeCompletion[]
  status      Status      @default(Tba)
  users       User[]      @relation("UserClasses")
  mentors     User[]      @relation("ClassMentors")
  notes       Note[]      @relation("ClassNotes")
}

model BatchClass {
  id       String  @id @default(cuid())
  batchId  String
  classId  String
  batch    Batch   @relation(fields: [batchId], references: [id], onDelete: Cascade)
  class    Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  @@unique([batchId, classId]) 
}

model Challenge {
  id          String @id @default(uuid())
  title       String   @db.VarChar(100)
  description String   @db.VarChar(300)
  batch       Batch  @relation("BatchChallenges", fields: [batchId], references: [id])
  batchId     String
  class        Class  @relation("ClassChallenges" ,fields: [classId], references: [id])
  classId     String
  createdAt   DateTime @default(now())
  deadline    DateTime
  status      LessonStatus @default(ASSIGNED)
  files       File[]
  completions ChallengeCompletion[]
  mentorId    String
  mentor      User    @relation("UploadedChallenges", fields: [mentorId], references: [id], onDelete: Cascade) 
  notes       Note[]   @relation("ChallengeNotes")
}

model ChallengeCompletion {
  id           String    @id @default(uuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId  String
  challenge    Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  completed    Boolean   @default(false)
  submissionFiles File[]
  classId      String?
  class        Class?     @relation(fields: [classId], references: [id], onDelete: Cascade)
  completedAt  DateTime?
  status       LessonStatus @default(ASSIGNED)
  @@unique([userId, challengeId]) 
}

model Note {
  id          String      @id @default(uuid())
  content     String      @db.VarChar(300)
  visibility  Visibility
  graderId    String
  grader      User        @relation("GraderNotes", fields: [graderId], references: [id])
  traineeId   String
  trainee     User        @relation("TraineeNotes", fields: [traineeId], references: [id])
  classId     String
  class       Class       @relation("ClassNotes", fields: [classId], references: [id])
  lessonId    String?     
  lesson      Lesson?      @relation("LessonNotes", fields: [lessonId], references: [id])
  challengeId String?
  challenge   Challenge?   @relation("ChallengeNotes", fields: [challengeId], references: [id])
  createdAt   DateTime    @default(now())
}

model Lesson {  
  id          String   @id @default(uuid())
  title       String   @db.VarChar(100)
  description String   @db.VarChar(300)
  deadline    DateTime
  status      LessonStatus @default(ASSIGNED)
  createdAt   DateTime @default(now())
  files       File[]   
  batchId     String
  batch       Batch    @relation("BatchLessons", fields: [batchId], references: [id], onDelete: Cascade)
  classId     String
  class       Class    @relation("ClassLessons", fields: [classId], references: [id], onDelete: Cascade)
  completions LessonCompletion[]
  mentorId    String
  mentor      User     @relation("UploadedLessons", fields: [mentorId], references: [id], onDelete: Cascade) 
  notes       Note[]   @relation("LessonNotes")
}

model LessonCompletion {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completed   Boolean  @default(false)
  submissionFiles File[]
  classId     String?
  class     Class?    @relation(fields: [classId], references:[id], onDelete: Cascade)
  completedAt DateTime?
  status      LessonStatus @default(ASSIGNED)
  @@unique([userId, lessonId])
}

model Certificate {
  id        String  @id @default(uuid())
  traineeId String
  trainee   User    @relation(fields: [traineeId], references: [id], onDelete: Cascade)
  classId   String
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  batchId   String
  batch     Batch   @relation(fields: [batchId], references: [id], onDelete: Cascade)
  filepath  String  @db.Text
  mimetype  String
  size      Int
  status    String  @default("Issued")
  issuedAt  DateTime @default(now())
}

model File {
  id        String   @id @default(uuid())
  filename  String   @db.VarChar(255)
  filepath  String   @db.Text
  mimetype  String   @db.VarChar(100)
  size      Int
  lessonId  String?
  lesson    Lesson?   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  challengeId String?
  challenge Challenge? @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  lesCompletionId String?
  completionLs LessonCompletion? @relation(fields: [lesCompletionId], references: [id], onDelete: Cascade)
  chCompletionId String?
  completionCh ChallengeCompletion? @relation(fields: [chCompletionId], references: [id], onDelete: Cascade)
}

model Profile {
  id        String   @id @default(cuid())
  type      String
  userId    String
  filepath  String
  mimetype  String
  size      Int
  user      User     @relation(fields: [userId], references: [id])
  @@unique([userId, type]) //mastiin cuman 1 profile dengan 1 jenis yang terkait pada userId
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  type        String
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
}

model Schedule {
  id     String @id @default(uuid())
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  title  String @db.VarChar(20)
  scheduleDays ScheduleDay[]
}

model ScheduleDay {
  id        String @id @default(uuid())
  scheduleId String
  schedule  Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  day   String @db.VarChar(10) // e.g., "Monday"
  date  DateTime
  start String @db.VarChar(5)  // e.g., "09:00"
  end   String @db.VarChar(5)  // e.g., "17:00"
}

